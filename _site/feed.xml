<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="yazidchen.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="yazidchen.github.io/" rel="alternate" type="text/html" /><updated>2016-12-01T06:46:28+00:00</updated><id>yazidchen.github.io/</id><title>YazidChen Blog</title><subtitle>不归路，因兴趣而铺</subtitle><author><name>YazidChen</name></author><entry><title>Linux环境Nginx性能优化</title><link href="yazidchen.github.io/2016/12/01/NginxPerformance/" rel="alternate" type="text/html" title="Linux环境Nginx性能优化" /><published>2016-12-01T00:00:00+00:00</published><updated>2016-12-01T00:00:00+00:00</updated><id>yazidchen.github.io/2016/12/01/NginxPerformance</id><content type="html" xml:base="yazidchen.github.io/2016/12/01/NginxPerformance/">&lt;h1 id=&quot;nginx-performance-optimize&quot;&gt;Nginx performance optimize&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;一、主配置文件&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;主配置文件结构&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 主配置段，也即全局配置段；&lt;/span&gt;
···

&lt;span class=&quot;c&quot;&gt;# 事件驱动相关的配置；&lt;/span&gt;
  event &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           ...
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
  &lt;span class=&quot;c&quot;&gt;# http/https 协议相关的配置段； &lt;/span&gt;
  http &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          ...
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
  &lt;span class=&quot;c&quot;&gt;# 邮件配置段；&lt;/span&gt;
   mail &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          ...
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   
  &lt;span class=&quot;c&quot;&gt;# tcp/udp等相关协议的配置段&lt;/span&gt;
   stream &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      ...
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;主配置段相关配置&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;##定义执行权限的用户及组，如果省略组，则组名为用户所在组。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法：&lt;/span&gt;
user user &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;group];
&lt;span class=&quot;c&quot;&gt;#默认：&lt;/span&gt;
user nobody;

&lt;span class=&quot;c&quot;&gt;##指定存储nginx主进程编号pid的文件路径&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法：&lt;/span&gt;
pid path;
&lt;span class=&quot;c&quot;&gt;#默认：&lt;/span&gt;
pid logs/nginx.pid;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;二、性能优化&lt;/h2&gt;

&lt;h3 id=&quot;cpu&quot;&gt;2.1 关于CPU的配置项&lt;/h3&gt;

&lt;h4 id=&quot;section-4&quot;&gt;2.1.1 配置运行处理器&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;配置详解：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;##worker进程的数量，通常应该为当前主机的CPU的物理核心数。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法：&lt;/span&gt;
worker_processer number;
&lt;span class=&quot;c&quot;&gt;#默认：&lt;/span&gt;
worker_processer  1;

&lt;span class=&quot;c&quot;&gt;##worker进程绑定到固定的处理器（processer）上&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# cpumask(CPU掩码)，八位二进制，每一位代表一个处理器（processer），共8个，1代表固定使用，0代表不使用。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 00000001 : 0号processer&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 00000010 : 1号processer&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 00000100 : 2号processer&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法：&lt;/span&gt;
worker_cpu_affinity cpumask1 cpumask2 ...;
&lt;span class=&quot;c&quot;&gt;#默认：&lt;/span&gt;
worker_cpu_affinity auto;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;搞懂上述配置，必须先弄清楚&lt;strong&gt;中央处理器（CPU）&lt;/strong&gt;、&lt;strong&gt;内核&lt;/strong&gt;、&lt;strong&gt;处理器（processer）&lt;/strong&gt;三者的关系。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CPU&lt;/strong&gt;包含一个或多个&lt;strong&gt;内核&lt;/strong&gt;，一般一个&lt;strong&gt;内核&lt;/strong&gt;包含一个&lt;strong&gt;processer&lt;/strong&gt;，而支持一个&lt;strong&gt;内核&lt;/strong&gt;有两个&lt;strong&gt;processer&lt;/strong&gt;的技术，称为&lt;strong&gt;超线程技术&lt;/strong&gt;。此技术可以把&lt;strong&gt;CPU&lt;/strong&gt;中一个&lt;strong&gt;核心&lt;/strong&gt;模拟成两个用，以实现运算能力的大幅度提升。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Linux查看CPU信息：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;##总核(cpu cores)数 = 中央处理器（CPU）个数 X 每颗CPU的核数 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##总处理器（processor）数 =总核(cpu cores)数 X 超线程数&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#查看CPU总体信息&lt;/span&gt;
cat /proc/cpuinfo

&lt;span class=&quot;c&quot;&gt;# 查看CPU个数&lt;/span&gt;
cat /proc/cpuinfo| grep &lt;span class=&quot;s2&quot;&gt;&quot;physical id&quot;&lt;/span&gt;| sort| uniq| wc -l

&lt;span class=&quot;c&quot;&gt;# 查看每个CPU中的核数&lt;/span&gt;
cat /proc/cpuinfo| grep &lt;span class=&quot;s2&quot;&gt;&quot;cpu cores&quot;&lt;/span&gt;| uniq

&lt;span class=&quot;c&quot;&gt;# 查看总处理器（processor）个数&lt;/span&gt;
cat /proc/cpuinfo| grep &lt;span class=&quot;s2&quot;&gt;&quot;processor&quot;&lt;/span&gt;| wc -l
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过上述指令，查询到本机仅有1个CPU。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Uet4kiq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该CPU具有4个内核。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ql0WpC5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每核虚拟出2个超线程，作为处理器，共8个处理器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/aOpCeLn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;0号和4号处理器同在0号内核上，1号和5号处理器同在1号内核上，以此类推。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; 配置绑定处理器：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_processer 4；&lt;/code&gt;配置处理器数目项最好设置为&lt;strong&gt;小于等于CPU内核数&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_cpu_affinity 00000001 00000010 00000100 00001000;&lt;/code&gt;绑定处理器项将&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程均分在不同的内核上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QmDO3Sy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;./nginx -t&lt;/code&gt; 校验配置项正确性：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/XVnd5TH.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./nginx -s reload&lt;/code&gt;重启nginx后，可用以下方法校验：&lt;/p&gt;

&lt;p&gt;查看&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_processes 4;&lt;/code&gt;是否生效：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -aux | grep nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xqHVZPS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_cpu_affinity auto;&lt;/code&gt;是否生效：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#查看nginx进程在哪个CPU内核上运行&lt;/span&gt;
ps -axo pid,user,comm,psr |grep nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/25fLoOI.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程都均匀的分布在不同的内核上，而&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;进程与&lt;code class=&quot;highlighter-rouge&quot;&gt;pid&lt;/code&gt;为2517的&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程都绑定在0号内核上。其他内核上剩余的处理器共3个，便用作计算机其他进程的处理。&lt;/p&gt;

&lt;p&gt;这里有个疑问，0号内核上的&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程和&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;进程同在一个内核会不会给该内核造成极大的负载？&lt;/p&gt;

&lt;p&gt;我们先来了解一下&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;之间的关系。&lt;/p&gt;

&lt;p&gt;正常执行中的&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;会有多个进程，最基本的有&lt;code class=&quot;highlighter-rouge&quot;&gt;master process&lt;/code&gt;（主进程）和&lt;code class=&quot;highlighter-rouge&quot;&gt;worker process&lt;/code&gt;（工作进程）。&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;充当监控进程，而由主进程&lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;出来的&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;则充当工作进程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/22Euu68.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;进程充当整个进程组与用户的交互接口，同时对进程进行监护。它不需要处理网络事件，不负责业务的执行，只会通过管理&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程来实现重启服务、平滑升级、更换日志文件、配置文件实时生效等功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Ouirijn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程的主要任务是完成具体的任务逻辑。其主要关注点是与客户端或后端真实服务器（此时nginx作为中间代理）之间的数据可读/可写等I/O交互事件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;进程采用的是信号去通知&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程去做某些工作，这些工作包括&lt;code class=&quot;highlighter-rouge&quot;&gt;sig_atomic_t ngx_terminate&lt;/code&gt;（强制关闭进程）、&lt;code class=&quot;highlighter-rouge&quot;&gt;sig_atomic_t ngx_quit&lt;/code&gt;（优雅地关闭进程）、&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_uint_t ngx_exiting&lt;/code&gt;（退出进程标志位）、&lt;code class=&quot;highlighter-rouge&quot;&gt;sig_atomic_t ngx_reopen&lt;/code&gt;（重新打开所有文件）。&lt;/p&gt;

&lt;p&gt;如此看来，&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;消耗的资源并不多。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;2.1.2 配置进程优先级&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;##设定worker进程的nice值，nice值决定进程的优先级，在CPU运行队列较长时，可以被有限调度到CPU上运行。nice值默认为0，区间[-20,20]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法&lt;/span&gt;
worker_priority number;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里有个疑问：nice值是什么？&lt;/p&gt;

&lt;p&gt;首先先看一下进程的类型：&lt;/p&gt;

&lt;p&gt;根据消耗型来分，有&lt;strong&gt;I/O消耗型进程&lt;/strong&gt;、&lt;strong&gt;CPU消耗型进程&lt;/strong&gt;以及两者兼消耗型进程。
&lt;strong&gt;I/O消耗型进程&lt;/strong&gt;会把大部分时间消耗在I/O请求和等待I/O上，真正使用CPU的时间很少；而&lt;strong&gt;CPU消耗型进程&lt;/strong&gt;会把大部分时间用在使用CPU进行计算等操作。&lt;/p&gt;

&lt;p&gt;Linux系统为了给&lt;strong&gt;CPU消耗型进程&lt;/strong&gt;多一些处理器时间，而给&lt;strong&gt;I/O消耗型进程&lt;/strong&gt;少一些处理器时间，于是linux采取的不是简单的&lt;strong&gt;时间片调度算法&lt;/strong&gt;，而是改进的优先级调度算法，&lt;strong&gt;完全公平调度算法CFS&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我们来执行一个简单的命令：&lt;code class=&quot;highlighter-rouge&quot;&gt;ps -l&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/f6erFS3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中有两个参数：&lt;strong&gt;PRI&lt;/strong&gt;和&lt;strong&gt;NI&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;PRI&lt;/strong&gt;即进程的CPU調度优先级，就是进程被CPU执行的先后顺序的数值。它的值是由内核进行动态调整，用户无法调整它的值。此值越小，进程的优先级越高。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NI&lt;/strong&gt;即nice值，它是一个偏移量。它会影响优先级&lt;strong&gt;PRI(new)=PRI(old)+nice&lt;/strong&gt;，范围是-20到+19。root和普通用户所能更改的范围不同，root随意这要在-20-19这个范围内，普通用户0-19。相当于只能增高无法降低。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux系统是抢占式的，系统当前运行一个进程，但这个时候一个具有更高优先级的进程突然得到某种资源进入了就绪状态，然后他就来到cpu面前一脚踢开正在运行的进程，与CPU共度美好时光。&lt;/p&gt;

&lt;p&gt;至此，我们将&lt;code class=&quot;highlighter-rouge&quot;&gt;worker_priority&lt;/code&gt;的值设为-5，以提高优先级。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1）&lt;/strong&gt; 查询修改前状态：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps axo pid,user,comm,psr,nice | grep nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/VErMiA9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可看出&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程的&lt;code class=&quot;highlighter-rouge&quot;&gt;nice&lt;/code&gt;值都为0。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2）&lt;/strong&gt; 配置以提高优先级至-5：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker_priority -5;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./nginx -s reload&lt;/code&gt; 重启nginx。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3）&lt;/strong&gt; 查询修改后的状态：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MueCDqM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，&lt;code class=&quot;highlighter-rouge&quot;&gt;worker&lt;/code&gt;进程的&lt;code class=&quot;highlighter-rouge&quot;&gt;nice&lt;/code&gt;值已经修改成了-5。&lt;/p&gt;

&lt;h3 id=&quot;gzip&quot;&gt;2.2 gzip压缩传输数据&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;是若干种文件压缩程序的简称，代表&lt;code class=&quot;highlighter-rouge&quot;&gt;GNU zip&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;nginx中&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;压缩功能由&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_gzip_module&lt;/code&gt;模块支持。&lt;/p&gt;

&lt;p&gt;nginx中&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;的主要作用就是用来减轻服务器的带宽问题，经过&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;压缩后的页面大小可以变为原来的30%甚至更小，这样用户浏览页面时的速度会快很多。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;的压缩页面需要浏览器和服务器双方都支持，实际上就是服务器端压缩，传到浏览器后浏览器解压缩并解析。目前的大多数浏览器都支持解析&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;压缩过的页面。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;##gzip压缩功能开关&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法 &lt;/span&gt;
gzip on | off;
&lt;span class=&quot;c&quot;&gt;#默认 &lt;/span&gt;
gzip off;

&lt;span class=&quot;c&quot;&gt;##设置response响应的缓冲区大小。32 4k代表以4k为单位将响应数据以4k的32倍(128k)的大小申请内存。如果没有设置，缓冲区的大小默认为整个响应页面的大小。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法 &lt;/span&gt;
gzip_buffers number size;
&lt;span class=&quot;c&quot;&gt;#默认 &lt;/span&gt;
gzip_buffers 32 4k | 16 8k;

&lt;span class=&quot;c&quot;&gt;##设置gzip的压缩级别，可接受的范围是从1到9，数字越大压缩率越高，但更消耗CPU，一般设置6即可。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法&lt;/span&gt;
gzip_comp_level level;
&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
gzip_comp_level 1;

&lt;span class=&quot;c&quot;&gt;##设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。因为过小的文件内容压缩之后效果不明显，甚至会比不压缩时更大，所以一般建议长度不小于1000或者1K。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法&lt;/span&gt;
gzip_min_length length;
&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
gzip_min_length 20;

&lt;span class=&quot;c&quot;&gt;##指定哪些类型的响应才启用gzip压缩，多个用空格分隔。通配符”*”可以匹配任意类型，不管是否指定”text/html”类型，该类型的响应总是启用压缩。一般js、css等文本文件都启用压缩，如application/x-javascript、text/css、application/xml 等。具体的文件类型对应的mimi-type可以参考conf/mime.types文件。例如 jpg / png 这类文件一般不开启，因为图片格式已经是高度压缩过的，再压一遍没什么效果不说还浪费 CPU&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法&lt;/span&gt;
gzip_types mime-type ...;
&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
gzip_types text/html;

&lt;span class=&quot;c&quot;&gt;##设置gzip压缩所需要的请求的最小HTTP版本，低于该版本不使用gzip压缩。一般不用修改，默认即可。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法&lt;/span&gt;
gzip_http_version 1.0 | 1.1;
&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
gzip_http_version 1.1;

&lt;span class=&quot;c&quot;&gt;##如果请求的”User-Agent”头信息能被指定的正则表达式匹配，则对响应禁用gzip压缩功能。主要是为了兼容不支持gzip压缩的浏览器。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法&lt;/span&gt;
gzip_disable regex ...;
&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
—

&lt;span class=&quot;c&quot;&gt;##如果指令gzip,gzip_static或者gunzip被激活的话，启用Vary: Accept-Encoding响应头字段。&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#语法&lt;/span&gt;
gzip_vary on | off;
&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
gzip_vary off;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们对nginx做如下配置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/pZ25sfm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;保存重启后有：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/eUzpULs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而未开启gzip压缩的同一页面，其响应大小及时间如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/qQuBvDu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们再来看一下响应头信息：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/n1qAMnb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，响应头中已经存在&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Encoding:gzip&lt;/code&gt;，并且有返回我们设置的Vary值&lt;code class=&quot;highlighter-rouge&quot;&gt;Vary:Accept-Encoding&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在响应头中我们还看到&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer-Encoding:chunked&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer-Encoding&lt;/code&gt;字面意思是&lt;strong&gt;传输编码&lt;/strong&gt;，而&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Encoding&lt;/code&gt;字面意思是&lt;strong&gt;内容编码&lt;/strong&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Encoding&lt;/code&gt;通常用于对实体内容进行压缩编码，目的是优化传输，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;压缩，能大幅减小体积。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer-Encoding&lt;/code&gt;则是用来改变报文格式的，它不但不会减少实体内容传输大小，甚至还会使传输变大。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP协议中有一个重要概念：&lt;code class=&quot;highlighter-rouge&quot;&gt;Persistent Connection&lt;/code&gt;（持久连接，即&lt;strong&gt;长连接&lt;/strong&gt;）。&lt;strong&gt;长连接&lt;/strong&gt;的存在，主要是可以避开缓慢的三次握手，还可以避免遇上TCP慢启动的拥塞适应阶段。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;长连接&lt;/strong&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Connection: keep-alive&lt;/code&gt;这个头部来实现，服务端和客户端都可以使用它告诉对方在发送完数据之后不需要断开TCP连接，以备后用。HTTP/1.1则规定所有连接都必须是持久的，除非显式地在头部加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;Connection: close&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对于非持久连接，浏览器可以通过连接是否关闭来界定请求或响应实体的边界；对于持久连接，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;的长度信息，判断出响应实体已结束。那如果&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt;和实体实际长度不一致时，则由&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer-Encoding&lt;/code&gt;来解决。&lt;/p&gt;

&lt;p&gt;在头部加入&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer-Encoding: chunked&lt;/code&gt;之后，就代表这个报文采用了&lt;strong&gt;分块编码&lt;/strong&gt;。这时，报文中的实体需要改为用一系列分块来传输。每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的&lt;code class=&quot;highlighter-rouge&quot;&gt;CRLF（\r\n）&lt;/code&gt;，也不包括分块数据结尾的&lt;code class=&quot;highlighter-rouge&quot;&gt;CRLF&lt;/code&gt;。最后一个分块长度值必须为0，对应的分块数据没有内容，表示实体结束。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; Nginx中如果启用了&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;压缩，则必然采用&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer-Encoding:chunked&lt;/code&gt;的方式输出，原因如下：&lt;/p&gt;

&lt;p&gt;在Nginx内部，&lt;code class=&quot;highlighter-rouge&quot;&gt;r-&amp;gt;headers_out.content_length_n&lt;/code&gt;用于表述请求返回内容的长度，只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;r-&amp;gt;headers_out.content_length_n &amp;gt;=0&lt;/code&gt;的时候，才有意义。如果没有在脚本中强制&lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt;输出&lt;code class=&quot;highlighter-rouge&quot;&gt;content-length&lt;/code&gt;，则默认在Nginx中&lt;code class=&quot;highlighter-rouge&quot;&gt;r-&amp;gt;headers_out.content_length_n = -1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在Nginx中，&lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt;输出和&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;的输出是完全两个不同的阶段，&lt;code class=&quot;highlighter-rouge&quot;&gt;http header&lt;/code&gt;输出是由&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_send_header()&lt;/code&gt;执行，由各个功能模块调用。&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;的输出由&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_writer()&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_output_filter()&lt;/code&gt;产生。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;都有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;队列需要执行，分别是&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_top_header_filter&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_top_body_filter&lt;/code&gt;，在http的功能模块中把处理函数插入到这两个队列。&lt;/p&gt;

&lt;p&gt;真正的输出动作由&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_write_filter()&lt;/code&gt;产生。所以&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;队列的顺序很重要，&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_write_filter&lt;/code&gt;应该处于队列最后。也就是先输出&lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt;，再输出&lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;由此可见，&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;要对内容模块进行压缩处理，而在&lt;code class=&quot;highlighter-rouge&quot;&gt;header filter&lt;/code&gt;的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;模块不可能计算出压缩后的内容长度。所以Nginx会清空&lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;content-length&lt;/code&gt;。便采用&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer-Encoding:chunked&lt;/code&gt;的方式输出。&lt;/p&gt;

&lt;p&gt;既然&lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt;是内容编码，则压缩是在传输之前进行的，所以传输的分块是按照压缩后的数据分块的。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.liwenxin.com/2010/11/25/nginx-code-reading-4.html&quot;&gt;nginx源码解析(4)-深入http模块&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://phpor.net/blog/post/2037&quot;&gt;Response与Transfer-Encoding:chunked、Content-Length、Content-Encoding:gzip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imququ.com/post/transfer-encoding-header-in-http.html&quot;&gt;HTTP 协议中的 Transfer-Encoding&lt;/a&gt;&lt;/p&gt;</content><author><name>YazidChen</name></author><summary>Nginx performance optimize</summary></entry><entry><title>Linux环境Nginx安全配置</title><link href="yazidchen.github.io/2016/11/14/NginxSecuritySettingOnUbuntu/" rel="alternate" type="text/html" title="Linux环境Nginx安全配置" /><published>2016-11-14T00:00:00+00:00</published><updated>2016-11-14T00:00:00+00:00</updated><id>yazidchen.github.io/2016/11/14/NginxSecuritySettingOnUbuntu</id><content type="html" xml:base="yazidchen.github.io/2016/11/14/NginxSecuritySettingOnUbuntu/">&lt;h1 id=&quot;nginx-security-for-ubuntu1604&quot;&gt;Nginx Security For Ubuntu16.04&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;一、隐藏版本号&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.freebuf.com/news/9026.html&quot;&gt;nginx爆整数溢出漏洞&lt;/a&gt;
不怕一万，就怕万一。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.1 原始状态&lt;/h3&gt;

&lt;p&gt;原始情况下，访问错误的链接会有暴露版本信息的危险。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/WOYn9rJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用curl命令查出原始的版本信息：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -I ddos.jinzhucaifu.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/vBvNuK2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ngxhttpheaderfiltermodulec&quot;&gt;1.2 修改ngx_http_header_filter_module.c文件&lt;/h3&gt;

&lt;p&gt;进入nginx源码目录，找到&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_header_filter_module.c&lt;/code&gt;文件进行编辑,找到以下行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static char ngx_http_server_string[] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Server: nginx&quot;&lt;/span&gt; CRLF;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将nginx修改：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static char ngx_http_server_string[] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Server: Yazid&quot;&lt;/span&gt; CRLF;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ngxhttpspecialresponsec&quot;&gt;1.3 修改ngx_http_special_response.c文件&lt;/h3&gt;

&lt;p&gt;进入nginx源码目录，找到&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_special_response.c&lt;/code&gt;文件进行编辑,找到以下代码段：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static u_char ngx_http_error_full_tail[] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;&quot;&lt;/span&gt; NGINX_VER &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/center&amp;gt;&quot;&lt;/span&gt; CRLF
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/body&amp;gt;&quot;&lt;/span&gt; CRLF
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt; CRLF
;

static u_char ngx_http_error_tail[] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx&amp;lt;/center&amp;gt;&quot;&lt;/span&gt; CRLF
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/body&amp;gt;&quot;&lt;/span&gt; CRLF
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt; CRLF
;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将NGINX_VER去除，将nginx修改：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static u_char ngx_http_error_full_tail[] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;&quot;&quot;&amp;lt;/center&amp;gt;&quot;&lt;/span&gt; CRLF
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/body&amp;gt;&quot;&lt;/span&gt; CRLF
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt; CRLF
;

static u_char ngx_http_error_tail[] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;Yazid&amp;lt;/center&amp;gt;&quot;&lt;/span&gt; CRLF
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/body&amp;gt;&quot;&lt;/span&gt; CRLF
&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt; CRLF
;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nginxh&quot;&gt;1.4 修改nginx.h文件&lt;/h3&gt;

&lt;p&gt;进入nginx源码目录，找到&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.h&lt;/code&gt;文件进行编辑,找到以下代码段：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#define nginx_version      1011004&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#define NGINX_VERSION      &quot;1.11.4&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#define NGINX_VER          &quot;nginx/&quot; NGINX_VERSION&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#define NGINX_VAR          &quot;NGINX&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将所有敏感信息修改：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#define nginx_version      0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#define NGINX_VERSION      &quot;0&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#define NGINX_VER          &quot;Yazid/&quot; NGINX_VERSION&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#define NGINX_VAR          &quot;Yazid&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.5 重新编译&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#编译&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;root@yazid-chen:/opt/nginx/nginx-1.11.4# &lt;/span&gt;make
&lt;span class=&quot;c&quot;&gt;#安装&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;root@yazid-chen:/opt/nginx/nginx-1.11.4# &lt;/span&gt;make install
&lt;span class=&quot;c&quot;&gt;#启动&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;root@yazid-chen:/opt/nginx/nginx-1.11.4# &lt;/span&gt;/usr/local/nginx/sbin/nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;1.6 隐藏后状态&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/VpB6yIF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EDN2dFS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;nginx&quot;&gt;二、给Nginx以普通用户运行的权限&lt;/h2&gt;

&lt;p&gt;nginx服务默认启动用户是nobody&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/lhzo8nw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; 建立nginx用户&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#用户禁止登录，且无家目录&lt;/span&gt;
useradd nginx -s /sbin/nologin -M
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用id查看用户：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;id nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; 修改nginx.conf&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user  nobody;
&lt;span class=&quot;c&quot;&gt;# 将上句修改为&lt;/span&gt;
user  nginx;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/8KL0RsH.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; 给关键目录普通用户及组权限&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chown -R nginx conf/ logs/ sbin/
chgrp -R nginx conf/ logs/ sbin/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4)&lt;/strong&gt; 普通用户不能通过bind函数绑定小于1024的端口,而root用户可以做到,&lt;code class=&quot;highlighter-rouge&quot;&gt;CAP_NET_BIND_SERVICE&lt;/code&gt;的作用就是让普通用户也可以绑端口到1024以下的端口。让普通用户启动nginx绑定在80端口：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setcap &lt;span class=&quot;nv&quot;&gt;CAP_NET_BIND_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+ep /usr/local/nginx/sbin/nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setcap&lt;/code&gt;来源于&lt;code class=&quot;highlighter-rouge&quot;&gt;Capabilities&lt;/code&gt;（能力），它打破了UNIX/LINUX操作系统中超级用户/普通用户的概念,由普通用户也可以做只有超级用户可以完成的工作。&lt;code class=&quot;highlighter-rouge&quot;&gt;setcap&lt;/code&gt;可以设置程序文件的能力。另还有&lt;code class=&quot;highlighter-rouge&quot;&gt;getcap&lt;/code&gt;可以获得程序文件所具有的能力，&lt;code class=&quot;highlighter-rouge&quot;&gt;getpcaps&lt;/code&gt;可以获得进程所具有的能力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5)&lt;/strong&gt; 使用非root用户运行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo -u nginx /usr/local/nginx/sbin/nginx -c /opt/nginx/nginx-1.11.4/conf/nginx.conf 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;6)&lt;/strong&gt; 校验启动用户&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -aux |grep nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/5lthdxb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;三、禁用非必要的方法&lt;/h2&gt;

&lt;p&gt;针对&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;之外的请求，如&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;TRACE&lt;/code&gt;等，直接返回了&lt;code class=&quot;highlighter-rouge&quot;&gt;444&lt;/code&gt;状态码（&lt;code class=&quot;highlighter-rouge&quot;&gt;444&lt;/code&gt;是Nginx定义的响应状态码，会立即断开连接，没有响应正文）。&lt;/p&gt;

&lt;p&gt;具体配置是这样的,在&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Server&lt;/code&gt;中加入以下代码段：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request_method&lt;/span&gt; !~ ^&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;GET|HEAD|POST&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return    &lt;/span&gt;444;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可用chrome测试，在nginx的日志&lt;code class=&quot;highlighter-rouge&quot;&gt;access.log&lt;/code&gt;中看到效果。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;四、图片防盗链（未测试）&lt;/h2&gt;

&lt;p&gt;配置&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location ~ .&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gif|jpg|jpeg|png|bmp|swf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
valid_referers none blocked &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.epinv.com epinv.com &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.qq.com &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.baidu.com; 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$invalid_referer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  rewrite ^/ http://www.epinv.com/epinv.png; 
  &lt;span class=&quot;c&quot;&gt;#return 404; &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
expires      30d; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#语法&lt;/span&gt;
valid_referers none | blocked | server_names | string ...;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;指定合法的来源&lt;code class=&quot;highlighter-rouge&quot;&gt;referer&lt;/code&gt;，他决定了内置变量&lt;code class=&quot;highlighter-rouge&quot;&gt;$invalid_referer&lt;/code&gt;的值，如果&lt;code class=&quot;highlighter-rouge&quot;&gt;referer&lt;/code&gt;头部包含在这个合法网址里面，这个变量被设置为0，否则设置为1。不区分大小写的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt;: 				“Referer” 来源头部为空的情况。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blocked&lt;/code&gt;: 			“Referer”来源头部不为空，但是里面的值被代理或者防火墙删除了，这些值都不以http://或者https://开头。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;server_names&lt;/code&gt;: 		“Referer”来源头部包含当前的server_names（当前域名）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;arbitrary string&lt;/code&gt;: 	任意字符串,定义服务器名或者可选的URI前缀.主机名可以使用*开头或者结尾，在检测来源头部这个过程中，来源域名中的主机端口将会被忽略掉。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;regular expression&lt;/code&gt;: 正则表达式，&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;表示排除https://或http://开头的字符串。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;特别说明：&lt;/strong&gt;防盗链跳转的地址，不能再是设置防盗链的虚拟主机地址，要用第三个虚拟主机，要不就成死循环了！&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;五、限制连接请求数（未测试）&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_limit_conn_module&lt;/code&gt; 可以限制单个IP的连接数，&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_limit_req_module&lt;/code&gt; 可以限制单个IP每秒请求数，通过限制连接数和请求数能相对有效的防御CC攻击。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;5.1 限制每秒请求数&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_limit_req_module&lt;/code&gt;模块通过漏桶原理来限制单位时间内的请求数，一旦单位时间内请求数超过限制，就会返回503错误。配置需要在两个地方设置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nginx.conf的http段内定义触发条件，可以有多个条件。&lt;/li&gt;
  &lt;li&gt;在location内定义达到触发条件时nginx所要执行的动作。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    limit_req_zone &lt;span class=&quot;nv&quot;&gt;$binary_remote_addr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;one:10m &lt;span class=&quot;nv&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10r/s;//触发条件，所有访问ip限制每秒10个请求
    ...
    server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        ...
        location /search/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            limit_req &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;one &lt;span class=&quot;nv&quot;&gt;burst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;参数说明：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$binary_remote_addr&lt;/code&gt;：  	二进制远程地址&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zone=one:10m&lt;/code&gt;：    		定义zone名字叫one，并为这个zone分配10M内存，用来存储会话（二进制远程地址），1m内存可以保存16000会话&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rate=10r/s&lt;/code&gt;：     		限制频率为每秒10个请求&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;burst=5&lt;/code&gt;：         		允许超过频率限制的请求数不多于5个，假设1、2、3、4秒请求为每秒9个，那么第5秒内请求15个是允许的；反之，如果第一秒内请求15个，会将5个请求放到第二秒，第二秒内超过10的请求直接503，类似多秒内平均速率限制。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nodelay&lt;/code&gt;：         		超过的请求不被延迟处理，设置后15个请求在1秒内处理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ip&quot;&gt;5.2 限制IP连接数&lt;/h3&gt;

&lt;p&gt;设置共享内存区,最大允许连接数对应一个给定的键值。当超过这个极限时,服务器将返回503错误(服务暂时不可用)在回复一个请求:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    limit_conn_zone &lt;span class=&quot;nv&quot;&gt;$binary_remote_addr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;addr:10m;
    ...
    server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        ...
        location /download/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            limit_conn addr 1;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上每个IP只允许1个连接。&lt;/p&gt;

&lt;p&gt;下面的配置将会限制客户端IP连接到nginx服务器的数量，以及与此同时nginx服务器分发到虚拟服务器的总数：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
limit_conn_zone &lt;span class=&quot;nv&quot;&gt;$binary_remote_addr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;perip:10m;
limit_conn_zone &lt;span class=&quot;nv&quot;&gt;$server_name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;perserver:10m;
...
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    ...
    limit_conn perip 10;
    limit_conn perserver 100;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;设置共享内存区：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#指令&lt;/span&gt;
limit_conn_zone key &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;name:size;
&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
limit_conn_zone &lt;span class=&quot;nv&quot;&gt;$binary_remote_addr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;addr:10m;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当设置了服务器连接数限制的情况下的日志等级配置，默认error：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#指令&lt;/span&gt;
limit_conn_log_level info | notice | warn | error;

&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
limit_conn_log_level error;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;设置拒绝请求时返回的状态码：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#指令&lt;/span&gt;
limit_conn_status code;
&lt;span class=&quot;c&quot;&gt;#默认&lt;/span&gt;
limit_conn_status 503;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;5.3 白名单设置&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http_limit_conn&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;http_limit_req&lt;/code&gt;模块限制了单ip单位时间内的并发和请求数，但是如果Nginx前面有负载均衡或者反向代理，nginx获取的都是来自负载均衡的连接或请求，这时不应该限制负载均衡的连接和请求，就需要&lt;code class=&quot;highlighter-rouge&quot;&gt;geo&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;模块设置白名单：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;geo &lt;span class=&quot;nv&quot;&gt;$whiteiplist&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        default 1;
        10.11.18.120 0;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
map &lt;span class=&quot;nv&quot;&gt;$whiteiplist&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        1 &lt;span class=&quot;nv&quot;&gt;$binary_remote_addr&lt;/span&gt;;
        0 &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
limit_req_zone &lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;one:10m &lt;span class=&quot;nv&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10r/s;
limit_conn_zone &lt;span class=&quot;nv&quot;&gt;$limit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;addr:10m;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;geo&lt;/code&gt;模块定义了一个默认值是1的变量&lt;code class=&quot;highlighter-rouge&quot;&gt;whiteiplist&lt;/code&gt;,并加入白名单IP，其变量&lt;code class=&quot;highlighter-rouge&quot;&gt;whiteiplist&lt;/code&gt;的值为0。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;whiteiplist&lt;/code&gt;的值对应着&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;模块。1则受限，0则不受限。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bkjia.com/Linux/1124560.html&quot;&gt;Nginx安全优化之隐藏版本号&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imququ.com/post/my-nginx-conf-for-security.html#simple_thread&quot;&gt;本博客 Nginx 配置之安全篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nginx.org/en/docs/&quot;&gt;nginx documentation&lt;/a&gt;&lt;/p&gt;</content><author><name>YazidChen</name></author><summary>Nginx Security For Ubuntu16.04</summary></entry><entry><title>定时切分Nginx日志</title><link href="yazidchen.github.io/2016/10/12/CutNginxLog/" rel="alternate" type="text/html" title="定时切分Nginx日志" /><published>2016-10-12T00:00:00+00:00</published><updated>2016-10-12T00:00:00+00:00</updated><id>yazidchen.github.io/2016/10/12/CutNginxLog</id><content type="html" xml:base="yazidchen.github.io/2016/10/12/CutNginxLog/">&lt;h1 id=&quot;section&quot;&gt;一、编写日志自动切割脚本&lt;/h1&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /usr/local/nginx/sbin/cut_nginx_log.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;脚本编写：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# author YazidChen&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 一般设定切割时间是0点，切除昨天的日志。&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date -d &lt;span class=&quot;s2&quot;&gt;&quot;yesterday&quot;&lt;/span&gt; +&lt;span class=&quot;s2&quot;&gt;&quot;%Y%m%d&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/nginx/logs/
&lt;span class=&quot;nv&quot;&gt;ACCESS_LOG_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;access.log
&lt;span class=&quot;nv&quot;&gt;ERROR_LOG_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;error.log
&lt;span class=&quot;nv&quot;&gt;CUT_ACCESS_LOG_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ACCESS_LOG_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CUT_ERROR_LOG_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERROR_LOG_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PID_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/nginx/logs/nginx.pid

&lt;span class=&quot;c&quot;&gt;# 重命名原始日志文件&lt;/span&gt;
mv &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ACCESS_LOG_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CUT_ACCESS_LOG_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
mv &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERROR_LOG_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOG_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CUT_ERROR_LOG_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 向nginx主进程发信号，重新打开日志文件，当原始文件不存在时，重新生成新的日志文件access.log及error.log&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; -USR1 &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;cat &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PID_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;二、设置定时执行脚本&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;给脚本执行权限：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x cut_nginx_log.sh 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;使用crontab工具添加定时任务：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 编辑crontab文件&lt;/span&gt;
crontab -e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;编写定时任务，保存退出：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 每天0点执行任务&lt;/span&gt;
0 0 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /bin/sh /usr/local/nginx/sbin/cut_nginx_log.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为方便测试将时间修改：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/PmS5NG6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试过程中校验了日志内容，发现没有内容缺失，测试成功：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/cFDuNKZ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试中可能会使用到以下命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 列出crontab文件内容&lt;/span&gt;
crontab -l
&lt;span class=&quot;c&quot;&gt;# 删除crontab文件&lt;/span&gt;
crontab -r
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-2&quot;&gt;参考&lt;/h1&gt;

&lt;p&gt;本文参考以下文章，在此对原作者表示感谢！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pvbutler.blog.51cto.com/7662323/1653088&quot;&gt;Linux下定时切割nginx日志并删除指定天数前的日志记录&lt;/a&gt;&lt;/p&gt;</content><author><name>YazidChen</name></author><summary>一、编写日志自动切割脚本</summary></entry><entry><title>以Log4j切分Tomcat日志</title><link href="yazidchen.github.io/2016/10/09/CutTomcatLogByLog4j/" rel="alternate" type="text/html" title="以Log4j切分Tomcat日志" /><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><id>yazidchen.github.io/2016/10/09/CutTomcatLogByLog4j</id><content type="html" xml:base="yazidchen.github.io/2016/10/09/CutTomcatLogByLog4j/">&lt;h1 id=&quot;log4jproperties&quot;&gt;一、Log4j.properties解析&lt;/h1&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 根日志的级别定义为 DEBUG，并将名为 CATALINA 的 appender 添加其上。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.rootLogger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEBUG, CATALINA&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 将名为 CATALINA 的 appender 设置为DailyRollingFileAppender。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.Log4j.DailyRollingFileAppender&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 他将日志写入 log 目录下一个名为 log.out 的文件中。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${log}/log.out&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 该标志位默认为 true，意味着每次日志追加操作都将输出流刷新至文件。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.ImmediateFlush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 设置appender 对象的阀值。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.Threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;debug&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 该值默认为 true，其含义是让日志追加至文件末尾。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 设置回滚规则，在此我们设置为每分钟回滚方便测试。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.DatePattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yyyy-MM-dd-HH-mm&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 设置 appender CATALINA 的 layout。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.Log4j.PatternLayout&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# layout 被定义为 %m%n，即打印出来的日志信息末尾加入换行。
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.layout.conversionPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%m%n&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;conversionPattern&lt;/code&gt;可以自定义log的格式，相关参数有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;%p 输出优先级，即&lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG，INFO，WARN，ERROR，FATAL&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;%r 输出自应用启动到输出该log信息耗费的毫秒数。&lt;/li&gt;
  &lt;li&gt;%c 输出所属的类目，通常就是所在类的全名。&lt;/li&gt;
  &lt;li&gt;%t 输出产生该日志事件的线程名。&lt;/li&gt;
  &lt;li&gt;%m 输出代码中指定的消息。&lt;/li&gt;
  &lt;li&gt;%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”。&lt;/li&gt;
  &lt;li&gt;%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：&lt;code class=&quot;highlighter-rouge&quot;&gt;%d{yyyy MMM dd HH:mm:ss,SSS}&lt;/code&gt;，输出类似：2016年10月09日 ：15：41，628。&lt;/li&gt;
  &lt;li&gt;%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。&lt;/li&gt;
  &lt;li&gt;%L 输出当前记录器所在的文件行号，如输出: “51”。&lt;/li&gt;
  &lt;li&gt;%F 输出当前记录器所在的文件名称，如输出: “main.cpp”。&lt;/li&gt;
  &lt;li&gt;%x 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;log4jcatalinaout&quot;&gt;二、使用Log4j接管catalina.out&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;2.1 接管前置准备&lt;/h2&gt;

&lt;p&gt;我们先来了解一下&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME/bin/&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;catalina.sh&lt;/code&gt;的日志输出代码段：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/XF5gMJn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_OUT&lt;/code&gt;是日志存放地址，默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_BASE/logs/catalina.out&lt;/code&gt;，而&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt; &quot;$CATALINA_OUT&quot; 2&amp;gt;&amp;amp;1 &quot;&amp;amp;&quot;&lt;/code&gt;则是将启动时的主线程日志输出到&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_OUT&lt;/code&gt;中。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;前置一&lt;/h4&gt;

&lt;p&gt;假如你要分割后的主日志名还是&lt;code class=&quot;highlighter-rouge&quot;&gt;catalina.out&lt;/code&gt;，那这个文件可不必修改，跳过此步骤，只需修改接下来要讲的&lt;code class=&quot;highlighter-rouge&quot;&gt;log4j.properties&lt;/code&gt;文件即可；倘若你要修改主日志文件名为其他文件名，则需要修改&lt;code class=&quot;highlighter-rouge&quot;&gt;catalina.sh&lt;/code&gt;文件：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_OUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CATALINA_OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_BASE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/logs/catalina.out
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改为你的日志路径，在这里我设置主日志文件名为&quot;catalina.&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_OUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; ; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CATALINA_OUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CATALINA_BASE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/logs/catalina.
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;前置二&lt;/h4&gt;

&lt;p&gt;重命名&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME/bin/&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;logging.properties&lt;/code&gt;成其他名字，该文件不需要了，建议重命名保留:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv logging.properties loggin.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;2.2 切分方式&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;2.2.1 按时间切分&lt;/h3&gt;

&lt;p&gt;如需按时段生成日志文件，需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.Log4j.DailyRollingFileAppender&lt;/code&gt;，该类继承了&lt;code class=&quot;highlighter-rouge&quot;&gt;FileAppender&lt;/code&gt;类。该类多包涵了一个重要的属性：&lt;code class=&quot;highlighter-rouge&quot;&gt;DatePattern&lt;/code&gt;,该属性表明什么时间回滚文件，以及文件的命名约定。缺省情况下，在每天午夜回滚文件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DatePattern&lt;/code&gt;使用如下规则控制回滚计划：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-MM&lt;/code&gt;				在本月末，下月初回滚文件。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-MM-dd	&lt;/code&gt;		在每天午夜回滚文件，这是缺省值。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-MM-dd-a&lt;/code&gt;			在每天中午和午夜回滚文件。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-MM-dd-HH&lt;/code&gt;		在每个整点回滚文件。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-MM-dd-HH-mm&lt;/code&gt;		每分钟回滚文件。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-ww&lt;/code&gt;				根据地域，在每周的第一天回滚。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在项目中添加或修改&lt;code class=&quot;highlighter-rouge&quot;&gt;log4j.properties&lt;/code&gt;文件:&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;log4j.rootLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;INFO, CATALINA&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.log4j.DailyRollingFileAppender&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 此处文件路径对应前置准备中设置的路径
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${catalina.base}/logs/catalina.&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UTF-8&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 为方便测试，此处设置为每分钟分割一次
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.DatePattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yyyy-MM-dd-HH-mm'.log'&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.layout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.log4j.PatternLayout&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.CATALINA.layout.ConversionPattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;log4j.logger.org.springframework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DEBUG&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 以下按需要选择
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log4j.appender.LOCALHOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.log4j.DailyRollingFileAppender&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.LOCALHOST.File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${catalina.base}/logs/localhost.&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.LOCALHOST.Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.LOCALHOST.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UTF-8&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.LOCALHOST.DatePattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yyyy-MM-dd-HH-mm'.log'&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.LOCALHOST.layout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.log4j.PatternLayout&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.LOCALHOST.layout.ConversionPattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;%d [%t] %-5p %c- %m%n&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;log4j.appender.MANAGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.log4j.DailyRollingFileAppender&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.MANAGER.File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${catalina.base}/logs/manager.&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.MANAGER.Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.MANAGER.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UTF-8&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.MANAGER.DatePattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yyyy-MM-dd-HH-mm'.log'&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.MANAGER.layout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.log4j.PatternLayout&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;log4j.appender.MANAGER.layout.ConversionPattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;%d [%t] %-5p %c- %m%n&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;log4j.appender.HOST-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MANAGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.log4j.DailyRollingFileAppender&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;log4j.appender.HOST-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MANAGER.File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${catalina.base}/logs/host-manager.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;log4j.appender.HOST-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MANAGER.Append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;log4j.appender.HOST-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MANAGER.Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UTF-8&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;log4j.appender.HOST-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MANAGER.DatePattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yyyy-MM-dd-HH-mm'.log'&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;log4j.appender.HOST-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MANAGER.layout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.log4j.PatternLayout&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;log4j.appender.HOST-&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MANAGER.layout.ConversionPattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;%d [%t] %-5p %c- %m%n&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 配置哪个loggers属于哪个appenders，按需选择配置
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;log4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost]=INFO,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;LOCALHOST&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;log4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager]=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;INFO,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;MANAGER&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;log4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager]=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;INFO,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;HOST-MANAGER&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;2.2.2 按日志文件大小拆分&lt;/h3&gt;

&lt;p&gt;如需按日志文件大小分割日志，则需要使用 org.apache.Log4j.RollingFileAppender，该类继承了 FileAppender 类，继承了它的所有属性。
该类多包括了以下可配置属性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxFileSize&lt;/code&gt;：这是文件大小的阀值，大于该值时，文件会回滚。该值默认为 10 MB。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maxBackupIndex&lt;/code&gt;：该值表示备份文件的个数，默认为 1。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对log4j.properties配置引入以下关键项：&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 设置日志文件阀值最大为5MB
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Log4j.appender.CATALINA.MaxFileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5MB&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 设置日志文件个数为2
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Log4j.appender.CATALINA.MaxBackupIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;该示例配置文件展示了每个日志文件最大为 5 MB，如果超过该最大值，则会生成一个新的日志文件。由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;maxBackupIndex&lt;/code&gt; 的值为 2，当第二个文件的大小超过最大值时，会擦去第一个日志文件的内容，所有的日志都回滚至第一个日志文件。&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;参考&lt;/h1&gt;
&lt;p&gt;本文参考以下文章，在此对原作者表示感谢！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/jsan/blog/205669&quot;&gt;Tomcat下使用Log4j 接管 catalina.out 日志文件生成方式&lt;/a&gt;&lt;/p&gt;</content><author><name>YazidChen</name></author><summary>一、Log4j.properties解析</summary></entry><entry><title>Linux环境Tomcat安全配置</title><link href="yazidchen.github.io/2016/09/13/TomcatSecuritySettingOnUbuntu/" rel="alternate" type="text/html" title="Linux环境Tomcat安全配置" /><published>2016-09-13T00:00:00+00:00</published><updated>2016-09-13T00:00:00+00:00</updated><id>yazidchen.github.io/2016/09/13/TomcatSecuritySettingOnUbuntu</id><content type="html" xml:base="yazidchen.github.io/2016/09/13/TomcatSecuritySettingOnUbuntu/">&lt;h1 id=&quot;tomcat-security-for-ubuntu1604&quot;&gt;Tomcat Security For Ubuntu16.04&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;一、权限&lt;/h2&gt;

&lt;h3 id=&quot;tomcat&quot;&gt;1.1 创建tomcat用户&lt;/h3&gt;

&lt;p&gt;为了提高系统安全，tomcat不应该使用root运行。为它创建一个新用户和组。
创建一个tomcat组：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo groupadd tomcat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建一个叫tomcat的用户：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;tomcat用户属于tomcat组，家目录是&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/tomcat&lt;/code&gt;，我要把tomcat安装在这个目录。&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/false&lt;/code&gt;代表这个用户是不能登录的。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.2 更改权限&lt;/h3&gt;

&lt;p&gt;赋给tomcat用户各种权限：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt
sudo chgrp -R tomcat tomcat

cd /opt/tomcat
sudo chgrp -R tomcat conf
sudo chmod g+rwx conf
sudo chmod g+r conf/*

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改各种目录的所有者：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt
sudo chown -R tomcat tomcat

cd /opt/tomcat
sudo chown -R tomcat webapps/ work/ temp/ logs/ bin/ lib/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.3 配置定时登出&lt;/h3&gt;

&lt;p&gt;如果使用启用了Tomcat用户，则需要设置Tomcat定时登出，将&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME\conf\server.xml&lt;/code&gt;配置如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;
           connectionTimeout=&quot;20000&quot;
           redirectPort=&quot;8443&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;二、配置开机启动&lt;/h2&gt;

&lt;p&gt;我们需要把tomcat配置为服务，为了做到这一点，需要创建systemd服务配置文件。&lt;/p&gt;

&lt;p&gt;使用下面命令查看Java安装路径：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo update-java-alternatives -l
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在在&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system&lt;/code&gt;目录创建服务文件tomcat.service：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vim /etc/systemd/system/tomcat.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;tomcat.service内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=Apache Tomcat Web Application Container
After=network.target
 
[Service]
Type=forking
 
Environment=JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre
Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid
Environment=CATALINA_HOME=/opt/tomcat
Environment=CATALINA_BASE=/opt/tomcat
Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'
Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'
 
ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/opt/tomcat/bin/shutdown.sh
 
User=tomcat
Group=tomcat
 
[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;替换JAVA_HOME的值，注意在路径后加jre；上面配置内存要根据需要修改。&lt;/p&gt;

&lt;p&gt;修改完成之后，重新加载systemd：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动tomcat：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl enable tomcat
sudo systemctl start tomcat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;确认tomcat启动状态：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl status tomcat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/wD55zo0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;三、安全加固配置&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;3.1 删除应用包&lt;/h3&gt;

&lt;p&gt;除了需要部署上去的应用，其余位于&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME\webapps&lt;/code&gt;文件夹中的应用如docs、examples、host-manager、manager和ROOT，若无业务必要，请执行删除上述的应用包。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -rf docs/ examples/ host-manager/ manager/ ROOT/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tomcat-1&quot;&gt;3.2 禁止Tomcat目录列表&lt;/h3&gt;

&lt;p&gt;确保&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME\conf\web.xml&lt;/code&gt;中listings的值为false：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;init-param&amp;gt;
    &amp;lt;param-name&amp;gt;listings&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt;
&amp;lt;/init-param&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;cookiehttponly&quot;&gt;3.3 设置Cookie的HttpOnly属性&lt;/h3&gt;

&lt;p&gt;如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME\conf\context.xml&lt;/code&gt;文件中添加&lt;code class=&quot;highlighter-rouge&quot;&gt;useHttpOnly=&quot;true&quot;&lt;/code&gt;配置如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Context useHttpOnly=&quot;true&quot;&amp;gt;
    &amp;lt;WatchedResource&amp;gt;WEB-INF/web.xml&amp;lt;/WatchedResource&amp;gt;
    &amp;lt;WatchedResource&amp;gt;${catalina.base}/conf/web.xml&amp;lt;/WatchedResource&amp;gt;
&amp;lt;/Context&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;进入项目路径找到web.xml：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@yazid-chen:/opt/tomcat/webapps/api/WEB-INF# vim web.xml 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;加入http-only配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;session-config&amp;gt;
      &amp;lt;session-timeout&amp;gt;30&amp;lt;/session-timeout&amp;gt;
      &amp;lt;cookie-config&amp;gt;
            &amp;lt;http-only&amp;gt;true&amp;lt;/http-only&amp;gt;
            &amp;lt;secure&amp;gt;true&amp;lt;/secure&amp;gt;
      &amp;lt;/cookie-config&amp;gt;
&amp;lt;/session-config&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;shutdown&quot;&gt;3.4 配置shutdown端口&lt;/h3&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME\conf\server.xml&lt;/code&gt;中有&lt;code class=&quot;highlighter-rouge&quot;&gt;“&amp;lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&amp;gt;”&lt;/code&gt;的配置。&lt;/p&gt;

&lt;p&gt;任何人只要telnet到服务器的8005端口，输入”SHUTDOWN”，然后回车，服务器立即就被关掉了。&lt;/p&gt;

&lt;p&gt;从安全的角度上考虑，需要把这个shutdown指令改成一个别人不容易猜测的字符串。而且这个修改不影响shutdown.bat或shutdown.sh的执行。&lt;/p&gt;

&lt;p&gt;配置如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Serverport=&quot;未被占用的端口&quot; shutdown=&quot;较为复杂的字符串&quot;&amp;gt;
#注：配置的端口需要大于1024。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tomcat-2&quot;&gt;3.5 隐藏Tomcat版本信息&lt;/h3&gt;

&lt;p&gt;在默认配置下，当应用出现异常时，客户端会显示Tomcat的版本信息。攻击者可以根据Tomcat版本信息选择漏洞库攻击，所以需要将Tomcat的版本信息隐藏，解压&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME\lib\catalina.jar&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@yazid-chen:/opt/tomcat/lib# jar xf catalina.jar 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;\org\apache\catalina\util&lt;/code&gt;中的配置ServerInfo.properties如下,info和number随意：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.info=Server
server.number=Y
server.built=Jul 4 2016 18:22:47 UTC

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;war&quot;&gt;3.6 关闭war自动部署&lt;/h3&gt;

&lt;p&gt;默认的配置war放在&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME\webapps&lt;/code&gt;中会自动部署，所以关闭war自动部署防止被植入木马等恶意程序。将&lt;code class=&quot;highlighter-rouge&quot;&gt;$CATALINA_HOME\conf\server.xml&lt;/code&gt;配置如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;
      unpackWARs=&quot;false&quot; autoDeploy=&quot;false&quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ajp&quot;&gt;3.7 管理AJP端口&lt;/h3&gt;

&lt;p&gt;AJP是为 Tomcat 与 HTTP 服务器之间通信而定制的协议，能提供较高的通信速度和效率。如果tomcat前端放的是apache的时候，会使用到AJP这个连接器。如果用nginx做的反向代理，因此不使用此连接器，因此需要注销掉该连接器。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!--
    &amp;lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&amp;gt;
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tomcat-3&quot;&gt;3.8 用普通用户启动Tomcat&lt;/h3&gt;

&lt;p&gt;用root用户启动tomcat有一个严重的问题，那就是tomcat具有root权限。这意味着你的任何一个jsp脚本都具有root权限，所以可以轻易地用jsp脚本删除你整个硬盘里的东西！所以我们最好不要使用root启动tomcat。&lt;/p&gt;

&lt;p&gt;权限修改见上文1.2所示。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#查看由哪个用户启动
ps aux | grep tomcat 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/24sEcMq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;本文参考以下文章，在此对原作者表示感谢！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.topspeedsnail.com/archives/4551&quot;&gt;Ubuntu 16.04安装Tomcat 8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.51itong.net/tomcat-4687.html&quot;&gt;Tomcat安全加固配置手册&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tuicool.com/articles/BRF732f&quot;&gt;Tomcat 安全配置与性能优化&lt;/a&gt;&lt;/p&gt;</content><author><name>YazidChen</name></author><summary>Tomcat Security For Ubuntu16.04</summary></entry><entry><title>Win环境Jekyll+Markdown+Github Pages搭建个人Blogs</title><link href="yazidchen.github.io/2016/08/19/CreateBlogsForJekyllOnGithub/" rel="alternate" type="text/html" title="Win环境Jekyll+Markdown+Github Pages搭建个人Blogs" /><published>2016-08-19T00:00:00+00:00</published><updated>2016-08-19T00:00:00+00:00</updated><id>yazidchen.github.io/2016/08/19/CreateBlogsForJekyllOnGithub</id><content type="html" xml:base="yazidchen.github.io/2016/08/19/CreateBlogsForJekyllOnGithub/">&lt;h2 id=&quot;github-pages&quot;&gt;开启Github Pages&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;在github中建立一个基于你的用户名的repository&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/pJBemgT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;进入仓库 -&amp;gt; Setting -&amp;gt;找到Launch automatic page generator进入&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NX82S2v.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;此时相当于一篇博客页，填入必要的字段后，点击Continue to layouts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、&lt;/strong&gt;选样式 -&amp;gt; Publish page&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、&lt;/strong&gt;之后，你就能在Setting的GitHub Pages下看到你的地址了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/RhpshMR.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;部署Jekyll&lt;/h2&gt;

&lt;h3 id=&quot;rubyrubygems&quot;&gt;安装Ruby、RubyGems&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;下载&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot; title=&quot;RubyInstallers&quot;&gt;http://rubyinstaller.org/downloads/&lt;/a&gt;安装&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;配置环境变量：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;RUBY_HOME=D:\OfficeSoft\Ruby23-x64（目录地址）&lt;/li&gt;
  &lt;li&gt;在Path中添加 %RUBY_HOME%\bin&lt;/li&gt;
  &lt;li&gt;进cmd， &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt;，如果显示ruby版本信息说明安装成功。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;安装rubyGems&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd d:\OfficeSoft\rubygems-2.6.6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby setup.rb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jekyll-1&quot;&gt;安装Jekyll&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;blog&quot;&gt;创建本地blog站点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;cd进入想要存放blog的目录&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new YazidChen.Github.io&lt;/code&gt;（目录名自拟）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;开启站点服务&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekll serve&lt;/code&gt; 开启服务。可能会报错，一般为缺少包，根据报错做相应处理&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler
gem install minima
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;minima报错时，在\Ruby23-x64\lib\ruby\gems\2.3.0\gems\jekyll-3.2.1\lib\jekyll目录下找到layout.rb，进行如下操作&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Replace Line 38 with:

@path = base + &quot;/&quot; + name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;目录解读&lt;/h3&gt;

&lt;p&gt;刚生成的YazidChen.Github.io下存在以下结构&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xCQ3uNM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.sass-cache	-&amp;gt;	sass编译缓存文件的目录&lt;/li&gt;
  &lt;li&gt;_posts		-&amp;gt;	存放博文的目录，博文文件类型必须为markdown，文件名统一格式：YEAR-MONTH-DAY-TITLE，如&lt;code class=&quot;highlighter-rouge&quot;&gt;2016-08-19-welcome-to-jekyll.markdown&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;2016-08-19-welcome-to-jekyll.md&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;_site		-&amp;gt;	Jekyll解析完整个网站,会将源代码存在此目录&lt;/li&gt;
  &lt;li&gt;_config.yml	-&amp;gt;	Jekyll的配置文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyll-2&quot;&gt;使用Jekyll写博文&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;把仓库克隆到本地&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt;下载&lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;克隆仓库到本地&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/iyNOqSe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、&lt;/strong&gt;拷贝本地Jekyll创建的YazidChen.Github.io的所有子目录及文件到本地仓库中的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、&lt;/strong&gt;进入仓库启动jekyll&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/c2tOmeS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、&lt;/strong&gt;github 提交修改并同步&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;参考&lt;/h2&gt;

&lt;p&gt;本文参考以下文章，在此对原作者表示感谢！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyll.bootcss.com/docs/home/&quot;&gt;jekyll 中文文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/docs/home/&quot;&gt;jekyll English Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pwnny.cn/original/2016/06/26/MakeBlog.html&quot;&gt;Jekyll和Github搭建个人静态博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://kresnik.wang/works/tech/2015/06/07/%E5%9C%A8github-pages%E7%BD%91%E7%AB%99%E4%B8%8B%E7%94%A8jekyll%E5%88%B6%E4%BD%9C%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.html&quot;&gt;在github pages网站下用jekyll制作博客教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pizida.com/technology/2016/03/03/use-jekyll-create-blog-on-github/&quot;&gt;Jekyll本地搭建开发环境以及Github部署流程&lt;/a&gt;&lt;/p&gt;</content><author><name>YazidChen</name></author><summary>开启Github Pages</summary></entry></feed>
